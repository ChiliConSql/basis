//
// Top balloon component
//
// @param  hash  properties for decoration
//
// .c-balloon-top {
//   _balloon-top({
//     background-color: #fff,
//     border-color    : #ccc,
//     border-size     : 1px,
//     triangle-size   : 10px,
//   });
// }
//
// <div class="c-balloon-top">
//   ...
// </div>
//

_balloon-top(params = {}) {
  params = merge(
    {
      background-color: transparent,
      border-color    : transparent,
      border-size     : 0,
      triangle-size   : 10px,
    },
    params
  );

  position: relative;
  background-color: params['background-color'];
  _balloon-border(params['border-size'], params['border-color']);
  _balloon-triangle(
    top,
    params['triangle-size'],
    params['background-color'],
    params['border-size'],
    params['border-color']
  );
}

//
// Right balloon component
//
// @param  hash  properties for decoration
//
// .c-balloon-right {
//   _balloon-right({
//     background-color: #fff,
//     border-color    : #ccc,
//     border-size     : 1px,
//     triangle-size   : 10px,
//   });
// }
//
// <div class="c-balloon-right">
//   ...
// </div>
//

_balloon-right(params = {}) {
  params = merge(
    {
      background-color: transparent,
      border-color    : transparent,
      border-size     : 0,
      triangle-size   : 10px,
    },
    params
  );

  position: relative;
  background-color: params['background-color'];
  _balloon-border(params['border-size'], params['border-color']);
  _balloon-triangle(
    right,
    params['triangle-size'],
    params['background-color'],
    params['border-size'],
    params['border-color']
  );
}

//
// Bottom balloon component
//
// @param  hash  properties for decoration
//
// .c-balloon-bottom {
//   _balloon-bottom({
//     background-color: #fff,
//     border-color    : #ccc,
//     border-size     : 1px,
//     triangle-size   : 10px,
//   });
// }
//
// <div class="c-balloon-bottom">
//   ...
// </div>
//

_balloon-bottom(params = {}) {
  params = merge(
    {
      background-color: transparent,
      border-color    : transparent,
      border-size     : 0,
      triangle-size   : 10px,
    },
    params
  );

  position: relative;
  background-color: params['background-color'];
  __balloon-border(params['border-size'], params['border-color']);
  __balloon-triangle(
    bottom,
    params['triangle-size'],
    params['background-color'],
    params['border-size'],
    params['border-color']
  );
}

//
// Left balloon component
//
// @param  hash  properties for decoration
//
// .c-balloon-left {
//   _balloon-left({
//     background-color: #fff,
//     border-color    : #ccc,
//     border-size     : 1px,
//     triangle-size   : 10px,
//   });
// }
//
// <div class="c-balloon-left">
//   ...
// </div>
//

_balloon-left(params = {}) {
  params = merge(
    {
      background-color: transparent,
      border-color    : transparent,
      border-size     : 0,
      triangle-size   : 10px,
    },
    params
  );

  position: relative;
  background-color: params['background-color'];
  _balloon-border(params['border-size'], params['border-color']);
  _balloon-triangle(
    left,
    params['triangle-size'],
    params['background-color'],
    params['border-size'],
    params['border-color']
  );
}

//
// Generate balloon border
//
// @param  length  size  border-size
// @param  hex  color  border-color
//
__balloon-border(size, color) {
  if (size && color) {
    border: size solid color;
  }
}

//
// Generate balloon triangle
//
// @param  string  position
// @param  length  size  triangle size
// @param  hex  background-color
// @param  length  border-size
// @param  hex  border-color
//
__balloon-triangle(position, size, background-color, border-size = 0, border-color = transparent) {
  triangle-function-name = _triangle- + position;
  before = size * -1;
  after  = before;
  if (0 < border-size) {
    after = after + border-size + 1;
  }

  &::before, &::after {
    content: '';
    display: block;

    if ('top' == position || 'bottom' == position) {
      margin-left: ((size / 2) * -1);
    } else if ('right' == position || 'left' == position) {
      margin-top: ((size / 2) * -1);
    }
  }

  &::before {
    if ('top' == position) {
      _position(absolute, before, null, null, 50%);
    } else if ('right' == position) {
      _position(absolute, 50%, before, null, null);
    } else if ('bottom' == position) {
      _position(absolute, null, null, before, 50%);
    } else if ('left' == position) {
      _position(absolute, 50%, null, null, before);
    }
    triangle-function-name(size, size, border-color);
  }

  &::after {
    if ('top' == position) {
      _position(absolute, after, null, null, 50%);
    } else if ('right' == position) {
      _position(absolute, 50%, after, null, null);
    } else if ('bottom' == position) {
      _position(absolute, null, null, after, 50%);
    } else if ('left' == position) {
      _position(absolute, 50%, null, null, after);
    }
    triangle-function-name(size, size, background-color);
  }
}
